        -:    0:Source:decode.c
        -:    0:Graph:./main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:
        -:    2:/**
        -:    3: * `decode.c' - b64
        -:    4: *
        -:    5: * copyright (c) 2014 joseph werle
        -:    6: */
        -:    7:
        -:    8:#include <stdio.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <ctype.h>
        -:   11:#include "b64.h"
        -:   12:
        -:   13:#ifdef b64_USE_CUSTOM_MALLOC
        -:   14:extern void* b64_malloc(size_t);
        -:   15:#endif
        -:   16:
        -:   17:#ifdef b64_USE_CUSTOM_REALLOC
        -:   18:extern void* b64_realloc(void*, size_t);
        -:   19:#endif
        -:   20:
        -:   21:unsigned char *
function b64_decode called 0 returned 0% blocks executed 0%
    #####:   22:b64_decode (const char *src, size_t len) {
    #####:   23:  return b64_decode_ex(src, len, NULL);
call    0 never executed
        -:   24:}
        -:   25:
        -:   26:unsigned char *
function b64_decode_ex called 0 returned 0% blocks executed 0%
    #####:   27:b64_decode_ex (const char *src, size_t len, size_t *decsize) {
    #####:   28:  int i = 0;
    #####:   29:  int j = 0;
    #####:   30:  int l = 0;
    #####:   31:  size_t size = 0;
    #####:   32:  unsigned char *dec = NULL;
        -:   33:  unsigned char buf[3];
        -:   34:  unsigned char tmp[4];
        -:   35:
        -:   36:  // alloc
    #####:   37:  dec = (unsigned char *) b64_malloc(1);
    #####:   38:  if (NULL == dec) { return NULL; }
branch  0 never executed
branch  1 never executed
        -:   39:
        -:   40:  // parse until end of source
    #####:   41:  while (len--) {
branch  0 never executed
branch  1 never executed
        -:   42:    // break if char is `=' or not base64 char
    #####:   43:    if ('=' == src[j]) { break; }
branch  0 never executed
branch  1 never executed
    #####:   44:    if (!(isalnum(src[j]) || '+' == src[j] || '/' == src[j])) { break; }
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:   45:
        -:   46:    // read up to 4 bytes at a time into `tmp'
    #####:   47:    tmp[i++] = src[j++];
        -:   48:
        -:   49:    // if 4 bytes read then decode into `buf'
    #####:   50:    if (4 == i) {
branch  0 never executed
branch  1 never executed
        -:   51:      // translate values in `tmp' from table
    #####:   52:      for (i = 0; i < 4; ++i) {
branch  0 never executed
branch  1 never executed
        -:   53:        // find translation char in `b64_table'
    #####:   54:        for (l = 0; l < 64; ++l) {
branch  0 never executed
branch  1 never executed
    #####:   55:          if (tmp[i] == b64_table[l]) {
branch  0 never executed
branch  1 never executed
    #####:   56:            tmp[i] = l;
    #####:   57:            break;
        -:   58:          }
        -:   59:        }
        -:   60:      }
        -:   61:
        -:   62:      // decode
    #####:   63:      buf[0] = (tmp[0] << 2) + ((tmp[1] & 0x30) >> 4);
    #####:   64:      buf[1] = ((tmp[1] & 0xf) << 4) + ((tmp[2] & 0x3c) >> 2);
    #####:   65:      buf[2] = ((tmp[2] & 0x3) << 6) + tmp[3];
        -:   66:
        -:   67:      // write decoded buffer to `dec'
    #####:   68:      dec = (unsigned char *) b64_realloc(dec, size + 3);
    #####:   69:      if (dec != NULL){
branch  0 never executed
branch  1 never executed
    #####:   70:        for (i = 0; i < 3; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   71:          dec[size++] = buf[i];
        -:   72:        }
        -:   73:      } else {
    #####:   74:        return NULL;
        -:   75:      }
        -:   76:
        -:   77:      // reset
    #####:   78:      i = 0;
        -:   79:    }
        -:   80:  }
        -:   81:
        -:   82:  // remainder
    #####:   83:  if (i > 0) {
branch  0 never executed
branch  1 never executed
        -:   84:    // fill `tmp' with `\0' at most 4 times
    #####:   85:    for (j = i; j < 4; ++j) {
branch  0 never executed
branch  1 never executed
    #####:   86:      tmp[j] = '\0';
        -:   87:    }
        -:   88:
        -:   89:    // translate remainder
    #####:   90:    for (j = 0; j < 4; ++j) {
branch  0 never executed
branch  1 never executed
        -:   91:        // find translation char in `b64_table'
    #####:   92:        for (l = 0; l < 64; ++l) {
branch  0 never executed
branch  1 never executed
    #####:   93:          if (tmp[j] == b64_table[l]) {
branch  0 never executed
branch  1 never executed
    #####:   94:            tmp[j] = l;
    #####:   95:            break;
        -:   96:          }
        -:   97:        }
        -:   98:    }
        -:   99:
        -:  100:    // decode remainder
    #####:  101:    buf[0] = (tmp[0] << 2) + ((tmp[1] & 0x30) >> 4);
    #####:  102:    buf[1] = ((tmp[1] & 0xf) << 4) + ((tmp[2] & 0x3c) >> 2);
    #####:  103:    buf[2] = ((tmp[2] & 0x3) << 6) + tmp[3];
        -:  104:
        -:  105:    // write remainer decoded buffer to `dec'
    #####:  106:    dec = (unsigned char *) b64_realloc(dec, size + (i - 1));
    #####:  107:    if (dec != NULL){
branch  0 never executed
branch  1 never executed
    #####:  108:      for (j = 0; (j < i - 1); ++j) {
branch  0 never executed
branch  1 never executed
    #####:  109:        dec[size++] = buf[j];
        -:  110:      }
        -:  111:    } else {
    #####:  112:      return NULL;
        -:  113:    }
        -:  114:  }
        -:  115:
        -:  116:  // Make sure we have enough space to add '\0' character at end.
    #####:  117:  dec = (unsigned char *) b64_realloc(dec, size + 1);
    #####:  118:  if (dec != NULL){
branch  0 never executed
branch  1 never executed
    #####:  119:    dec[size] = '\0';
        -:  120:  } else {
    #####:  121:    return NULL;
        -:  122:  }
        -:  123:
        -:  124:  // Return back the size of decoded string if demanded.
    #####:  125:  if (decsize != NULL) {
branch  0 never executed
branch  1 never executed
    #####:  126:    *decsize = size;
        -:  127:  }
        -:  128:
    #####:  129:  printf("decoding: %s\n", dec);
call    0 never executed
        -:  130:
    #####:  131:  return dec;
        -:  132:}
